/*
2D Point Basic Structure
No complex
*/

template<class T>
struct Point2D{
    T x, y;

    Point2d(T x=T{}, T y=T{}) : x(x),y(y) {}

    Point2d& operator+=(const Point2d &P) { x+=P.x, y+=P.y; return *this; }
    Point2d& operator-=(const Point2d &P) { x-=P.x, y-=P.y; return *this; }
    Point2d& operator*=(const T &t) { x*=t, y*=t; return *this; }
    Point2d& operator/=(const T &t) { x/=t, y/=t; return *this; }

    Point2d operator+(const Point2d &P) const{ return Point2d(*this)+=P; }
    Point2d operator-(const Point2d &P) const{ return Point2d(*this)-=P; }
    Point2d operator*(const T &t) const{ return Point2d(*this)*=t; }
    Point2d operator/(const T &t) const{ return Point2d(*this)/=t; }

    T dotP(const Point2d &P={}) const{ return x*P.x+y*P.y; }
    T crossP(const Point2d &P={}) const{ return x*P.y-P.x*y; }
    T distance(const Point2d &P={}) const{ return hypot(P.x-x,P.y-y); }

    friend istream& operator>>(istream& in, Point2d &P){ return in >> P.x >> P.y;  }
    friend ostream& operator<<(ostream& out, const Point2d &P){ return out << P.x << " " << P.y;  }
};
